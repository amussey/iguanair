#!/usr/bin/python -tt

#**************************************************************************
# * usb-test **************************************************************
# **************************************************************************
# *
# * TODO: DESCRIBE AND DOCUMENT THIS FILE
# *
# * Copyright (C) 2007, IguanaWorks Incorporated (http://iguanaworks.net)
# * Author: Joseph Dunn <jdunn@iguanaworks.net>
# *
# * Distributed under the GPL version 2.
# * See LICENSE for license details.
# */


import warnings
import traceback
import sys
import struct
import iguanaIR
import tempfile
import time

#output "constants"
LOG_FATAL  = 0
LOG_ERROR  = 1
LOG_WARN   = 2
LOG_ALWAYS = 2.5
LOG_NORMAL = 3
LOG_INFO   = 4
LOG_DEBUG  = 5

msgPrefixes = [
    "FATAL: ",
    "ERROR: ",
    "WARNING: ",
    "",
    "INFO: ",
    "DEBUG: "
]

null = open('/dev/null', 'r+')

#local variables
currentLevel = LOG_NORMAL
logFile = None

def dieCleanly(level = None):
    """Exit the application with proper cleanup."""

    #TODO: perform application cleanup

    if level == None:
        level = LOG_ERROR

    #exit with appropriate value
    if level == LOG_FATAL:
        sys.exit(1)
    sys.exit(0)


def message(level, msg):
    """Print a message to a certain debug level"""
    retval = None

    if level <= currentLevel or level == LOG_ALWAYS:
        out = sys.stdout

        # if logfile is open print to it instead
        if logFile == "-":
            out = sys.log
        elif level <= LOG_WARN:
            out = sys.stderr

        retval = msgPrefixes[int(level + 0.5)] + msg
        out.write(retval)
        retval = len(retval)

    if level <= LOG_FATAL:
        dieCleanly(level)

    return retval


def printUsage(msg = None):
    usage = "Usage: " + sys.argv[0] + " [OPTION]..." + """

-h
--help : Print this usage message.

-l
--log-file : Specify a log to receive all messages.

-q
--quiet : Decrease verbosity.

-v
--verbose : Increase verbosity.
"""

    if msg != None:
        message(LOG_FATAL, msg + usage)
    message(LOG_ALWAYS, usage)
    dieCleanly(LOG_ALWAYS)


index = 1
while index < len(sys.argv):
    arg = sys.argv[index]
    if arg == "-h" or arg == "--help":
        printUsage()
    elif arg == "-l" or arg == "--log-file":
        index += 1
        logFile = sys.argv[index]
        if logFile == "-":
            logFile = None
    elif arg == "-q" or arg == "--quiet":
        if currentLevel > LOG_FATAL:
            currentLevel -= 1
    elif arg == "-v" or arg == "--verbose":
        currentLevel += 1
    else:
        printUsage("Unknown argument: " + arg + "\n")
    index += 1

# open the log file if specified
if logFile != None:
    sys.log = open(logFile, "a", 1)
    logFile = "-"

# detect the version before we try to write it
def deviceTransaction(type, data = ''):
    retval = False
    req = iguanaIR.createRequest(type, data)
    if not iguanaIR.writeRequest(req, conn):
        print 'Failed to write packet.'
    else:
        resp = iguanaIR.readResponse(conn, 10000)
        if iguanaIR.responseIsError(resp):
            print 'Error response.'
        elif type == iguanaIR.IG_DEV_GETVERSION:
            data = iguanaIR.removeData(resp)
            retval = ord(data[0]) + (ord(data[1]) << 8)
        else:
            retval = iguanaIR.removeData(resp)
            #retval = True
    return retval

def checkReceiver():
    # read 40 signals to test the receiver
    deviceTransaction(iguanaIR.IG_DEV_RECVON)
    count = 0
    while count < 40:
        packet = iguanaIR.readResponse(conn, 1000)
        data = iguanaIR.removeData(packet)
        format = 'I' * (len(data) / 4)

        for signal in struct.unpack(format, data):
            if signal != 0x25555:
                count += 1

            type = 'space: '
            if signal & iguanaIR.IG_PULSE_BIT:
                type = 'pulse: '
            message(LOG_INFO,
                    type + "%d\n" % (signal & iguanaIR.IG_PULSE_MASK))
    deviceTransaction(iguanaIR.IG_DEV_RECVOFF)

def sendPanasonicPower():
    # send a signal on all active channels
    vcrPower = """pulse 1040
space 12544
pulse 3498
space 1685
pulse 448
space 362
pulse 448
space 1237
pulse 448
space 384
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 384
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 384
pulse 448
space 362
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 384
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 384
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 384
pulse 448
space 362
pulse 448
space 362
pulse 448
space 362
pulse 448
space 384
pulse 448
space 362
pulse 448
space 362
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 384
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 1237
pulse 448
space 362
pulse 448
space 1237
pulse 448
"""

    output = tempfile.NamedTemporaryFile()
    output.write(vcrPower)
    output.flush()
    (count, data) = iguanaIR.readPulseFile(output.name)
    output.close()

    deviceTransaction(iguanaIR.IG_DEV_SEND, data)

default = 'S'
while True:
    try:
        type = None
        while type is None:
            message(LOG_NORMAL, "Old, sockets, hybrid, or LEDs? %s\n" % '[o/s/h/l]'.replace(default.lower(), default))
            line = sys.stdin.readline()
            if not line[:-1]:
                line = default

            if line[0].lower() in 'oshl':
                default = line[0].upper()

            if line[0].lower() == 'o':
                type = 'old'
                plugs = ()
                leds = (0x0,)
            elif line[0].lower() == 's':
                type = 'sockets'
                plugs = (0xF, 0x1, 0x2, 0x4, 0x8, 0x4, 0x2, 0x1, 0xF)
                leds = ()
            elif line[0].lower() == 'h':
                type = 'hybrid'
                plugs = (0xC, 0x4, 0x8, 0x4, 0xC)
                leds = (0x1,)
            elif line[0].lower() == 'l':
                type = 'leds'
                plugs = ()
                leds = (0x1, 0x4)

        # connect to the device and check the version
        conn = iguanaIR.connect('0')
        message(LOG_NORMAL, "Looking for a device.\n")
        version = deviceTransaction(iguanaIR.IG_DEV_GETVERSION)
        if version != 3 and version != 4:
            message(LOG_ERROR, "This script only tests versions 3 and 4\n")
            continue

        message(LOG_NORMAL, "Checking receiver.\n")
        checkReceiver()

        if plugs:
            message(LOG_NORMAL, "Doing sockets tests.\n")
            for channels in plugs:
                deviceTransaction(iguanaIR.IG_DEV_SETCHANNELS,
                                  chr(channels << 4))
                sendPanasonicPower()
                time.sleep(0.1)

        if leds:
            message(LOG_NORMAL, "Doing led tests.\n")
            for channels in leds:
                message(LOG_NORMAL, "Press enter to send panasonic power on channel %s.\n" % channels)
                line = sys.stdin.readline()
                deviceTransaction(iguanaIR.IG_DEV_SETCHANNELS,
                                  chr(channels << 4))
                sendPanasonicPower()
                if len(leds) == 1:
                    message(LOG_NORMAL, "Press enter to send again.\n")
                else:
                    message(LOG_NORMAL,
                            "Flip, then press enter to send again.\n")
                line = sys.stdin.readline()
                deviceTransaction(iguanaIR.IG_DEV_SETCHANNELS,
                                  chr(channels << 4))
                sendPanasonicPower()

    except KeyboardInterrupt:
        if type is None:
            break
