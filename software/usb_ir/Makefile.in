SHELL = /bin/sh
VPATH = @srcdir@

subdirs = @subdirs@
top_srcdir = @top_srcdir@
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
infodir = $(prefix)/info
libdir = $(prefix)/lib/gnudl
mandir = $(prefix)/man/man1

CC = @CC@
CPPFLAGS = @CPPFLAGS@
CFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
INSTALL = @INSTALL@

SHAREARG = -shared
SHAREEXT = dylib
ifeq ($(shell uname -m),x86_64)
  LIBDIR  = lib64
  CFLAGS += -fpic
else
  LIBDIR  = lib

  ifeq ($(shell uname -m),ppc)
    CFLAGS += -fpic
  else
    ifeq ($(shell uname -m),Power Macintosh)
      LIBDIR  = lib
      CFLAGS += -fPIC
      CPPFLAGS += -I/sw/include
      LDFLAGS += -L/sw/lib
      SHAREARG = -dynamiclib
      SHAREEXT = dylib
    endif
  endif
endif

# Older versions of libusb do not play with threads at all nicely.
# This driver was actually developed on such a version of libusb.
# However, in later versions threads seem to not eat the responses for
# URBs intended for other threads.  By defining LIBUSB_NO_THREADS you
# can request the slower (around 1/4 the speed for USB transaction
# heavy workloads), but safer, behavior where 2 threads never use the
# same libusb object at once.
#
# version 0.1.8 and earlier need more than this (i.e. NOT SUPPORTED)
# version 0.1.10a and earlier need this
# version 0.1.11 and later do not need this; works with kernel-2.6.5 and later
# version 0.1.12 only works with kernel-2.6.10 and later
#
#CPPFLAGS+=-DLIBUSB_NO_THREADS
#
# NOTE: I'd automate this if make had a conditional.... guess I
# should use autoconf

.PHONY: all
all: igclient igdaemon
igclient igdaemon: libiguanaIR.$(SHAREEXT)

libiguanaIR.$(SHAREEXT): iguanaIR.o support.o dataPackets.o pipes.o base.o
	$(CC) $(SHAREARG) $(LDFLAGS) $^ -lpopt -o $@

igdaemon: daemon.o client-interface.o device-interface.o usbclient.o \
          list.o compatibility.o
	$(CC) $(LDFLAGS) $^ -lpopt -lusb -L. -liguanaIR -o $@

igclient: client.o list.o
	$(CC) $(LDFLAGS) $^ -lpopt -L. -liguanaIR -o $@

%.o: %.c Makefile iguanaIR.h
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $< -o $@

# need a special dependency for config.h
base.o: base.c config.h

# NOTE: I would rather use PYTHON_VERSION, but it doesn't work
ifneq (@PYTHON_CPPFLAGS@,)
all: _iguanaIR.$(SHAREEXT)

iguanaIR_wrap.c iguanaIR.py: iguanaIR.i iguanaIR.h Makefile
	swig $(CPPFLAGS) @PYTHON_CPPFLAGS@ -python $<

iguanaIR_wrap.o: iguanaIR_wrap.c Makefile
	$(CC) -c $(CPPFLAGS) @PYTHON_CPPFLAGS@ $(CFLAGS) -Wno-strict-aliasing -Wno-unused -Wno-implicit-function-declaration -Wno-long-long $< -o $@

_iguanaIR.$(SHAREEXT): iguanaIR_wrap.o
	$(CC) $(LDFLAGS) @PYTHON_LDFLAGS@ $(SHAREARG) $^ -L. -liguanaIR -o $@
endif

.PHONY: install
install: all
	install -D igclient $(DESTDIR)/usr/bin/igclient
	install -D igdaemon $(DESTDIR)/usr/bin/igdaemon
	install -D libiguanaIR.$(SHAREEXT) $(DESTDIR)/usr/$(LIBDIR)/libiguanaIR.$(SHAREEXT)
	install -D iguanaIR.init $(DESTDIR)/etc/rc.d/init.d/iguanaIR
	install -D --mode=0644 iguanaIR.options $(DESTDIR)/etc/default/iguanaIR
	install -D iguanaIR.h $(DESTDIR)/usr/include/iguanaIR.h
	install -D --mode 644 plug-trigger/udev/iguanaIR.rules \
	                      $(DESTDIR)/etc/udev/rules.d/iguanaIR.rules
	install --mode 755 -d $(DESTDIR)/etc/udev/devices/iguanaIR
# This is for fairly old versions of Fedora....
#	install -D --mode 644 plug-trigger/hotplug/iguanaIR.usermap \
#	                      $(DESTDIR)/etc/hotplug/usb/iguanaIR.usermap
#	install -D --mode 755 plug-trigger/hotplug/iguanaIR \
#	                      $(DESTDIR)/etc/hotplug/usb/iguanaIR

.PHONY: clean
clean:
	rm -f *~ *.o *iguanaIR.$(SHAREEXT) *libiguanaIR.a iguanaIR.py* iguanaIR_wrap.c igdaemon igclient config.log

.PHONY: distclean
distclean: clean
	rm -f Makefile config.h

.PHONY: cleanest
cleanest: distclean
	rm -rf configure autom4te.cache





AUTOCONF=autoconf
ACLOCAL=aclocal
ifeq ($(SYSTEM),freebsd)
    AUTOCONF=autoconf259
    ACLOCAL=aclocal19
endif

.PHONY: dist devel-cleaner
dist: configure
devel-clean: distclean
	rm -rf autoconf/autom4te.cache autoconf/aclocal.m4 

# rules to rebuild the configure script
M4S=$(filter-out autoconf/aclocal.m4, $(wildcard autoconf/*.m4))
autoconf/aclocal.m4: $(M4S)
	cd autoconf; $(ACLOCAL)

configure: autoconf/configure.ac autoconf/aclocal.m4
	cd autoconf; $(AUTOCONF) -o ../configure configure.ac

config.h.in: autoconf/configure.ac
	cd autoconf; autoheader configure.ac; mv config.h.in ..

config.status: configure
	./config.status --recheck

Makefile: Makefile.in config.status
	./config.status

config.h: autoconf/stamp-h
autoconf/stamp-h: config.h.in config.status
	./config.status
