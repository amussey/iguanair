#!/usr/bin/python -tt
import warnings
import traceback
import subprocess
import sys

import iguanaIR

#output "constants"
LOG_FATAL  = 0
LOG_ERROR  = 1
LOG_WARN   = 2
LOG_ALWAYS = 2.5
LOG_NORMAL = 3
LOG_INFO   = 4
LOG_DEBUG  = 5

msgPrefixes = [
    "FATAL: ",
    "ERROR: ",
    "WARNING: ",
    "",
    "INFO: ",
    "DEBUG: "
]

null = open('/dev/null', 'r+')

#local variables
currentLevel = LOG_NORMAL
logFile = None
text = None

def dieCleanly(level = None):
    """Exit the application with proper cleanup."""

    #TODO: perform application cleanup

    if level == None:
        level = LOG_ERROR

    #exit with appropriate value
    if level == LOG_FATAL:
        sys.exit(1)
    sys.exit(0)


def message(level, msg):
    """Print a message to a certain debug level"""
    retval = None

    if level <= currentLevel or level == LOG_ALWAYS:
        out = sys.stdout

        # if logfile is open print to it instead
        if logFile == "-":
            out = sys.log
        elif level <= LOG_WARN:
            out = sys.stderr

        retval = msgPrefixes[int(level + 0.5)] + msg
        out.write(retval)
        retval = len(retval)

    if level <= LOG_FATAL:
        dieCleanly(level)

    return retval


def printUsage(msg = None):
    usage = "Usage: " + sys.argv[0] + " [OPTION]..." + """

-h
--help : Print this usage message.

-l
--log-file : Specify a log to receive all messages.

-q
--quiet : Decrease verbosity.

-v
--verbose : Increase verbosity.
"""

    if msg != None:
        message(LOG_FATAL, msg + usage)
    message(LOG_ALWAYS, usage)
    dieCleanly(LOG_ALWAYS)


index = 1
while index < len(sys.argv):
    arg = sys.argv[index]
    if arg == "-h" or arg == "--help":
        printUsage()
    elif arg == "-l" or arg == "--log-file":
        index += 1
        logFile = sys.argv[index]
        if logFile == "-":
            logFile = None
    elif arg == "-q" or arg == "--quiet":
        if currentLevel > LOG_FATAL:
            currentLevel -= 1
    elif arg == "-v" or arg == "--verbose":
        currentLevel += 1
    elif text is None:
        text = arg
    else:
        text += ' ' + arg
    index += 1

# open the log file if specified
if logFile != None:
    sys.log = open(logFile, "a", 1)
    logFile = "-"


POWER_PIN  = 0x08
REGSEL_PIN = 0x04
RW_PIN     = 0x02
ENABLE_PIN = 0x01

_conn = iguanaIR.connect('0')

def deviceTransaction(type, data = '', quiet = False):
    retval = False
    req = iguanaIR.createRequest(type, data)
    if not iguanaIR.writeRequest(req, _conn):
        if not quiet:
            print 'Failed to write packet. %s\n' % _conn
    else:
        resp = iguanaIR.readResponse(_conn, 3000)
        if resp is None:
            if not quiet:
                print "No response received.\n"
        elif type == iguanaIR.IG_DEV_GETVERSION:
            if not iguanaIR.responseIsError(resp):
                data = iguanaIR.removeData(resp)
                retval = ord(data[0]) + (ord(data[1]) << 8)
        elif iguanaIR.responseIsError(resp):
            if not quiet:
                print 'Error response code: 0x%s\n' % iguanaIR.code(resp)
        else:
            retval = iguanaIR.removeData(resp)

    return retval

def strobeEnable(pins):
    pins |= ENABLE_PIN | POWER_PIN
    deviceTransaction(iguanaIR.IG_DEV_SETPINS,
                      chr(pins & 0x0F) + chr((pins & 0xF0) >> 4))
    pins &= ~ENABLE_PIN
    deviceTransaction(iguanaIR.IG_DEV_SETPINS,
                      chr(pins & 0x0F) + chr((pins & 0xF0) >> 4))

def writeString(text):
    for c in text:
        # write high nibble)
        strobeEnable((ord(c) & 0xF0) | REGSEL_PIN)
        # write low nibble)
        strobeEnable(((ord(c) & 0x0F) << 4) | REGSEL_PIN)

def writeBulkPinData(data):
    if version < 2:
        raise Exception('First bulkpin support was in version 2.')
    deviceTransaction(iguanaIR.IG_DEV_PINBURST, data)

def generateBulkPinData(text, isCommand = True):
    if (version == 2 and len(text) > 15) or \
       len(text) > 35:
        raise ValueError('Text too long')

    regsel = REGSEL_PIN
    if isCommand:
        regsel = 0

    output = ''
    if version == 2:
        output = chr(len(text) * 4)
    for c in text:
        a = (ord(c) & 0xF0)
        b = (ord(c) & 0x0F) << 4
        output += chr(a | regsel | POWER_PIN | ENABLE_PIN) + \
                  chr(a | regsel | POWER_PIN) + \
                  chr(b | regsel | POWER_PIN | ENABLE_PIN) + \
                  chr(b | regsel | POWER_PIN);
    if version == 2:
        output += chr(0) * (64 - len(output))
    return output

def bulkWriteCommands(text, isCommand = True):
    writeBulkPinData(generateBulkPinData(text, isCommand))

def bulkWriteString(text):
    bulkWriteCommands(text, False)

def initLCD():
    global version
    # detect the version nice an early
    version = deviceTransaction(iguanaIR.IG_DEV_GETVERSION)

    # set all the pins to outputs
#    deviceTransaction(iguanaIR.IG_DEV_SETCONFIG0, chr(iguanaIR.IG_OUTPUT) * 4)
#    deviceTransaction(iguanaIR.IG_DEV_SETCONFIG1, chr(iguanaIR.IG_OUTPUT) * 4)
    deviceTransaction(iguanaIR.IG_DEV_SETPINCONFIG,
                      chr(iguanaIR.IG_OUTPUT) * 8)

    # send the Function Set command 3 times
    strobeEnable(0x30)
    strobeEnable(0x30)
    strobeEnable(0x30)

    # send the home command
    strobeEnable(0x20)

    # Function Set, display off, display clear, mode set
    bulkWriteCommands('\x28\x08\x01\x08')
    # appear to need a delay between clear and on
    # display on
    bulkWriteCommands('\x0F')

initLCD()
if text is None:
    writeString('H')
    bulkWriteString('ello world')
else:
    bulkWriteString(text)
