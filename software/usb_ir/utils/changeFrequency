#!/usr/bin/python -tt
import warnings
import traceback
import sys
import StringIO
import iguanaIR

#output "constants"
FATAL  = 0
ERROR  = 1
WARN   = 2
ALWAYS = 2.5
NORMAL = 3
INFO   = 4
DEBUG  = 5

msgPrefixes = [
    "FATAL: ",
    "ERROR: ",
    "WARNING: ",
    "",
    "INFO: ",
    "DEBUG: "
]

#local variables
currentLevel = NORMAL
logFile = None
delay = None
device = '0'

# common known frequency approximations
freqs = {
    '38' : 16,
    '56' : 10
}

def dieCleanly(level = None):
    """Exit the application with proper cleanup."""

    #TODO: perform application cleanup

    if level == None:
        level = ERROR

    #exit with appropriate value
    if level == FATAL:
        sys.exit(1)
    sys.exit(0)


def message(level, msg):
    """Print a message to a certain debug level"""
    retval = None

    if level <= currentLevel or level == ALWAYS:
        out = sys.stdout

        # if logfile is open print to it instead
        if logFile == "-":
            out = sys.log
        elif level <= WARN:
            out = sys.stderr

        retval = msgPrefixes[int(level + 0.5)] + msg
        out.write(retval)
        retval = len(retval)

    if level <= FATAL:
        dieCleanly(level)

    return retval


def printUsage(msg = None):
    usage = "Usage: " + sys.argv[0] + " [OPTION]..." + """

--delay : Set the delay directly (commonly between 10 and 20).

-d
--device : Device index or id.

-f
--frequency : What frequency are you looking for in kHz.  Currently
              supports: %s

-h
--help : Print this usage message.

-l
--log-file : Specify a log to receive all messages.

-q
--quiet : Decrease verbosity.

-v
--verbose : Increase verbosity.
""" % freqs

    if msg != None:
        message(FATAL, msg + usage)
    message(ALWAYS, usage)
    dieCleanly(ALWAYS)


index = 1
while index < len(sys.argv):
    arg = sys.argv[index]
    if arg == "--delay":
        index += 1
        delay = sys.argv[index]
    elif arg == '-d' or arg == "--device":
        index += 1
        device = sys.argv[index]
    elif arg == '-f' or arg == "--frequency":
        index += 1
        if sys.argv[index] in freqs:
            delay = freqs[sys.argv[index]]
    elif arg == "-h" or arg == "--help":
        printUsage()
    elif arg == "-l" or arg == "--log-file":
        index += 1
        logFile = sys.argv[index]
        if logFile == "-":
            logFile = None
    elif arg == "-q" or arg == "--quiet":
        if currentLevel > FATAL:
            currentLevel -= 1
    elif arg == "-v" or arg == "--verbose":
        currentLevel += 1
    else:
        printUsage("Unknown argument: " + arg + "\n")
    index += 1

# open the log file if specified
if logFile != None:
    sys.log = open(logFile, "a", 1)
    logFile = "-"

if delay is None:
    message(FATAL, "Nothing to do.\n")

# helper function that should move into iguanaIR.py
def deviceTransaction(type, data = ''):
    retval = False
    result = None
    
    req = iguanaIR.createRequest(type, data)
    if not iguanaIR.writeRequest(req, conn):
        message(WARN, 'Failed to write packet.\n')
    else:
        resp = iguanaIR.readResponse(conn, 10000)
        if iguanaIR.responseIsError(resp):
            message(INFO, 'Error response.\n')
        else:
            result = iguanaIR.removeData(resp)
            retval = True
    return (retval, result)

# connect to device 0
conn = iguanaIR.connect(device)
if conn == -1:
    message(FATAL, "Failed to connect to the device: %s\n" % device)

# make sure the version is 3
(retval, result) = deviceTransaction(iguanaIR.IG_DEV_GETVERSION)
if not retval:
    message(FATAL, "Failed to get the device version.\n")
version = ord(result[0]) + ord(result[1]) * 255
if version != 3:
    message(FATAL, "Cowardly not writing block to non-version-3 device.\n")

# block data is specific to version 3
blockData = """
1c00
55 07 11 55 02 00 5f 0f a5 51 0f a0 32 3e 07 53
03 21 7f 64 5c 51 03 21 80 a0 06 55 02 00 80 06
55 02 40 80 01 5b a0 10 5d 00 32 02 60 00 79 50
XX 78 40 af f1 8f fb 41 00 bf 7a 0f 8f ce 41 00
"""

# read the blockData and convert into a page of memory with the value
# substituted.
data = ''
offset = 0
for line in StringIO.StringIO(blockData):
    parts = line.split()
    if len(parts) == 1:
        page = int(parts[0], 16) / 64
    else:
        for byte in parts:
            try:
                data += chr(int(byte, 16))
            except ValueError:
                data += chr(delay)
            offset += 1

# write the actual block to the device
(retval, result) = deviceTransaction(iguanaIR.IG_DEV_WRITEBLOCK,
                                     chr(page) + chr(0) + chr(0) + chr(0) + \
                                     data)
if not retval:
    message(FATAL, "Writeblock failed\n")

# SUCCESS!
message(NORMAL, "Successfully set the delay loop to %d\n" % delay)
