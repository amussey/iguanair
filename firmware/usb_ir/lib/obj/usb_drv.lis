 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: USB_drv.asm
 0000           ;;   Version: 1.5, Updated on 2005/08/17 at 15:01:28
 0000           ;;  Generated by PSoC Designer ver 4.2  b1013 : 02 September, 2004
 0000           ;;
 0000           ;;  DESCRIPTION: USB Device User Module control endpoint driver
 0000           ;;               for the enCoRe II family of devices
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API
 0000           ;;        function returns. Even though these registers may be preserved now,
 0000           ;;        there is no guarantee they will be preserved in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2004. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;------------------------------------------------
 0000           ; Port Data Registers
 0000           P0DATA:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           P1DATA:       equ 01h          ; Port 1 Data Register                     (RW)
 0002           P2DATA:       equ 02h          ; Port 2 Data Register                     (RW)
 0003           P3DATA:       equ 03h          ; Port 3 Data Register                     (RW)
 0004           P4DATA:       equ 04h          ; Port 4 Data Register                     (RW)
 0000           ; PSoC Compatability
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)(PSoC)
 0001           PRT1DR:       equ 01h          ; Port 1 Data Register                     (RW)(PSoC)
 0002           PRT2DR:       equ 02h          ; Port 2 Data Register                     (RW)(PSoC)
 0003           PRT3DR:       equ 03h          ; Port 3 Data Register                     (RW)(PSoC)
 0004           PRT4DR:       equ 04h          ; Port 4 Data Register                     (RW)(PSoC)
 0000           
 0000           ; Port/Pin Configuration Registers
 0005           P00CR:        equ 05h          ; P0.0 Configuration Register              (RW)
 0006           P01CR:        equ 06h          ; P0.1 Configuration Register              (RW)
 0007           P02CR:        equ 07h          ; P0.2 Configuration Register              (RW)
 0008           P03CR:        equ 08h          ; P0.3 Configuration Register              (RW)
 0009           P04CR:        equ 09h          ; P0.4 Configuration Register              (RW)
 000A           P05CR:        equ 0Ah          ; P0.5 Configuration Register              (RW)
 000B           P06CR:        equ 0Bh          ; P0.6 Configuration Register              (RW)
 000C           P07CR:        equ 0Ch          ; P0.7 Configuration Register              (RW)
 000D           P10CR:        equ 0Dh          ; P1.0 Configuration Register              (RW)
 000E           P11CR:        equ 0Eh          ; P1.1 Configuration Register              (RW)
 000F           P12CR:        equ 0Fh          ; P1.2 Configuration Register              (RW)
 0010           P13CR:        equ 10h          ; P1.3 Configuration Register              (RW)
 0011           P14CR:        equ 11h          ; P1.4 Configuration Register              (RW)
 0012           P15CR:        equ 12h          ; P1.5 Configuration Register              (RW)
 0013           P16CR:        equ 13h          ; P1.6 Configuration Register              (RW)
 0014           P17CR:        equ 14h          ; P1.7 Configuration Register              (RW)
 0015           P2CR:         equ 15h          ; P2.0-P2.7 Configuration Register         (RW)
 0016           P3CR:         equ 16h          ; P3.0-P3.7 Configuration Register         (RW)
 0017           P4CR:         equ 17h          ; P4.0-P4.7 Configuration Register         (RW)
 0000           
 0000           ; Timer Registers
 0020           FRTMRL:       equ 20h          ; Free Running Timer Low                   (RW)
 0021           FRTMRH:       equ 21h          ; Free Running Timer High                  (RW)
 0022           TCAP0R:       equ 22h          ; Capture 0 Rising                         (R)             
 0023           TCAP1R:       equ 23h          ; Capture 1 Rising                         (R)             
 0024           TCAP0F:       equ 24h          ; Capture 0 Falling                        (R)             
 0025           TCAP1F:       equ 25h          ; Capture 1 Falling                        (R)             
 0026           PITMRL:       equ 26h          ; Programmable Interval Timer Low          (RW)
 0027           PITMRH:       equ 27h          ; Programmable Interval Timer High         (RW)
 0028           PIRL:         equ 28h          ; Programmable Interval Timer Reload Low   (RW)
 0029           PIRH:         equ 29h          ; Programmable Interval Timer Reload High  (RW)
 002A           TMRCR:        equ 2Ah          ; Timer Configuration Register             (RW)
 002B           TCAPINTE:     equ 2Bh          ; Capture Timer Interrupt Enable           (RW)
 002C           TCAPINTS:     equ 2Ch          ; Capture Timer Interrupt Status           (RW)
 0000           
 0000           ; Clock Configuration Registers
 0030           CPUCLKCR:     equ 30h          ; CPU Clock Configuration Register         (RW)
 0000           CPUCLK_SEL_INT:         equ 00h ; CPU Clock Select Internal Oscillator
 0001           CPUCLK_SEL_EXT:         equ 01h ; CPU Clock Select External Clock
 0000           CPUCLK_USBCLK_SEL_INT:  equ 00h ; USB Clock Select Internal Clock
 0040           CPUCLK_USBCLK_SEL_EXT:  equ 40h ; USB Clock Select External Clock
 0000           CPUCLK_USBCLK_DIV2_DIS: equ 00h ; USB Clock Divide by 2 disable
 0080           CPUCLK_USBCLK_DIV2_ENA: equ 80h ; USB Clock Divide by 2 enable
 0000           
 0031           TMRCLKCR:     equ 31h          ; Timer Clock Configuration Register       (RW)
 0000           TMRCLKCR_ITMRCLK_IOSC:     equ 00h ; MASK: ITMRCLK Source--Internal Oscillator
 0001           TMRCLKCR_ITMRCLK_XOSC:     equ 01h ; MASK: ITMRCLK Source--External Oscillator or CLKIN
 0002           TMRCLKCR_ITMRCLK_LPO:      equ 02h ; MASK: ITMRCLK Source--Low Power Oscillator (32 Khz)
 0003           TMRCLKCR_ITMRCLK_TCAPCLK:  equ 03h ; MASK: ITMRCLK Source--TCAPCLK
 0000           TMRCLKCR_ITMRCLK_DIV_1:    equ 00h ; MASK: ITMRCLK Divider Value 1
 0004           TMRCLKCR_ITMRCLK_DIV_2:    equ 04h ; MASK: ITMRCLK Divider Value 2
 0008           TMRCLKCR_ITMRCLK_DIV_3:    equ 08h ; MASK: ITMRCLK Divider Value 3
 000C           TMRCLKCR_ITMRCLK_DIV_4:    equ 0Ch ; MASK: ITMRCLK Divider Value 4
 0002           TMRCLKCR_ITMRCLK_LPO:      equ 02h ; MASK: ITMRCLK Source--Low Power Oscillator (32 Khz)
 0000           TMRCLKCR_TCAPCLK_IOSC:     equ 00h ; MASK: TCAPCLK Source--Internal Oscillator
 0010           TMRCLKCR_TCAPCLK_XOSC:     equ 10h ; MASK: TCAPCLK Source--External Oscillator or CLKIN
 0020           TMRCLKCR_TCAPCLK_LPO:      equ 20h ; MASK: TCAPCLK Source--Low Power Oscillator (32 Khz)
 0030           TMRCLKCR_TCAPCLK_DISABLED: equ 30h ; MASK: TCAPCLK Source--DISABLED
 0000           TMRCLKCR_TCAPCLK_DIV_2:    equ 00h ; MASK: TCAPCLK Divider Value 2
 0040           TMRCLKCR_TCAPCLK_DIV_4:    equ 40h ; MASK: TCAPCLK Divider Value 4
 0080           TMRCLKCR_TCAPCLK_DIV_6:    equ 80h ; MASK: TCAPCLK Divider Value 6
 00C0           TMRCLKCR_TCAPCLK_DIV_8:    equ C0h ; MASK: TCAPCLK Divider Value 8
 0000           
 0032           CLKIOCR:      equ 32h          ; Clock I/O Configuration Register         (RW)
 0000           CLKIOCR_CLKOUT_IOSC:       equ 00h ; MASK: Clock Source--Internal Oscillator
 0001           CLKIOCR_CLKOUT_XOSC:       equ 01h ; MASK: Clock Source--External Oscillator or CLKIN
 0002           CLKIOCR_CLKOUT_LPO:        equ 02h ; MASK: Clock Source--Low Power Oscillator (32 Khz)
 0003           CLKIOCR_CLKOUT_CPUCLK:     equ 03h ; MASK: Clock Source--CPUCLK
 0000           
 0000           ; Oscillator Configuration Registers
 0034           IOSCTR:       equ 34h          ; Internal Oscillator Trim Register        (R)
 0035           XOSCTR:       equ 35h          ; Crystal Oscillator Trim Register         (R)
 0036           LPOSCTR:      equ 36h          ; Low Power Oscillator Trim Register       (RW)
 0000           
 0000           ; SPI Configuration/Data Registers
 003C           SPIDATA:      equ 3Ch          ; SPI Data Register                        (RW)
 003D           SPICR:        equ 3Dh          ; SPI Configuration Register               (RW)
 0000           
 0000           ; USB SIE Configuration/Data Registers
 0040           USBCR:        equ 40h          ; USB Configuration Register               (RW)
 0041           EP0CNT:       equ 41h          ; Endpoint 0 Count Register                (RW)
 0042           EP1CNT:       equ 42h          ; Endpoint 1 Count Register                (RW)
 0043           EP2CNT:       equ 43h          ; Endpoint 2 Count Register                (RW)
 0044           EP0MODE:      equ 44h          ; Endpoint 0 Mode  Register                (RW)
 0045           EP1MODE:      equ 45h          ; Endpoint 1 Mode  Register                (RW)
 0046           EP2MODE:      equ 46h          ; Endpoint 2 Mode  Register                (RW)
 0050           EP0DATA:      equ 50h          ; Endpoint 0 Data  Register (50h-57h)      (RW)
 0058           EP1DATA:      equ 58h          ; Endpoint 1 Data  Register (58h-5Fh)      (RW)
 0060           EP2DATA:      equ 60h          ; Endpoint 2 Data  Register (60h-67h)      (RW)
 0000           
 0000           ; Band-gap/TRIMBUF Configuration Registers
 0070           BGAPTR:       equ 70h          ; Band-gap Trim Register                   (R)
 0071           TRIM0:        equ 71h          ; TRIMBUF Trim Register 0                  (R)
 0072           TRIM1:        equ 72h          ; TRIMBUF Trim Register 1                  (R)
 0000           
 0000           ; VREG Configuration Register
 0073           VREGCR:       equ 73h          ; VREG Configuration Register              (RW)
 0000           
 0000           ; USB Transceiver Configuration Registers
 0074           USBXCR:       equ 74h          ; USB Transceiver Configuration Register   (RW)
 0080           USBXCR_ENABLE:    equ 80h      ; USB Transceiver Enable
 0001           USBXCR_FORCE:     equ 01h      ; USB Transceiver Force
 0000           
 0000           ; Data Pointer Registers--Listed for compatability with other M8C based parts.
 00D0           CPPDR:        equ D0h          ; Current Page Pointer Data Register       (RW)
 00D4           DPRDR:        equ D4h          ; Data Page Read Register                  (RW)
 00D5           DPWDR:        equ D5h          ; Data Page Write Register                 (RW)
 0000           
 0000           ; Watchdog Timer Reset
 00E3           RESWDT:       equ E3h          ; Watchdog Timer Reset                     (W)
 00E3           RES_WDT:      equ E3h          ; WatchDog Timer Register                  (W) (PSoC)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; Interrupt Mask Register                  (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; Interrupt Mask Register                  (RW)
 0040           INT_MSK2_GPIO_PORT4:       equ 40h ; MASK: enable/disable GPIO Port 4 interrupt
 0020           INT_MSK2_GPIO_PORT3:       equ 20h ; MASK: enable/disable GPIO Port 3 interrupt
 0010           INT_MSK2_GPIO_PORT2:       equ 10h ; MASK: enable/disable GPIO Port 2 interrupt
 0008           INT_MSK2_PS2_DATA_LOW:     equ 08h ; MASK: enable/disable PS/2 Data Low
 0004           INT_MSK2_GPIO_INT2:        equ 04h ; MASK: enable/disable GPIO INT2 interrupt
 0002           INT_MSK2_CTR_16_WRAP:      equ 02h ; MASK: enable/disable 16 bit counter wrap
 0001           INT_MSK2_TCAP1:            equ 01h ; MASK: enable/disable Timer/Capture 0 interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; Interrupt Mask Register                 (RW)
 0080           INT_MSK0_GPIO_PORT1:       equ 80h ; MASK: enable/disable GPIO Port 1 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO_INT1:        equ 20h ; MASK: enable/disable GPIO INT1 interrupt
 0010           INT_MSK0_GPIO_PORT0:       equ 10h ; MASK: enable/disable GPIO Port 0 interrupt
 0008           INT_MSK0_SPI_RX:           equ 08h ; MASK: enable/disable SPI Receive interrupt
 0004           INT_MSK0_SPI_TX:           equ 04h ; MASK: enable/disable SPI Transmit interrupt
 0002           INT_MSK0_GPIO_INT0:        equ 02h ; MASK: enable/disable GPIO INT0 interrupt
 0001           INT_MSK0_POR_LVD:          equ 01h ; MASK: enable/disable POR/LVD interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Interrupt Mask Register                 (RW)
 0080           INT_MSK1_TCAP0:            equ 80h ; MASK: enable/disable Timer/Capture 0 interrupt
 0040           INT_MSK1_PIT:              equ 40h ; MASK: enable/disable Progrmmable Interval Timer
 0020           INT_MSK1_MS_TIMER:         equ 20h ; MASK: enable/disable One Millisecond Timer interrupt
 0010           INT_MSK1_USB_ACTIVITY:     equ 10h ; MASK: enable/disable USB Bus Activity interrupt
 0008           INT_MSK1_USB_BUS_RESET:    equ 08h ; MASK: enable/disable USB Bus Reset interrupt
 0004           INT_MSK1_USB_EP2:          equ 04h ; MASK: enable/disable USB Endpoint 2 interrupt
 0002           INT_MSK1_USB_EP1:          equ 02h ; MASK: enable/disable USB Endpoint 1 interrupt
 0001           INT_MSK1_USB_EP0:          equ 01h ; MASK: enable/disable USB Endpoint 0 interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;------------------------------------------------------
 0000           ;        Register bank 1.
 0000           ;------------------------------------------------------
 00E0           OSC_CR0:                   equ E0h  ; System Oscillator Control Register 0     (RW)
 0020           OSC_CR0_NO_BUZZ:           equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:             equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:       equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:        equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:         equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:         equ 18h    ;     Set sleep bits for 1 sec period
 0000           
 0007           OSC_CR0_CPU:               equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:          equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:          equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:         equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:         equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:        equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:        equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz:      equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0000           
 0000           ;------------------------------------------------------
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 00FF           CPU_SCR:     equ FFh          ; CPU Status and Control Register          (#)
 0080           CPU_SCR_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR], ~CPU_SCR_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR], CPU_SCR_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR], CPU_SCR_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           MACRO   GET_WORD
 0000               PUSH A                              ; Quickly get a RAM temp
 0000               PUSH A                              ; Save the source MSB
 0000               ROMX                                ; Get the first byte
 0000               PUSH X                              ; Save X
 0000               MOV  X,SP                           ; Get SP, to index to the temp 
 0000               MOV  [X - 3],A                      ; Save the first byte
 0000               POP  X                              ; Get back the source LSB
 0000               POP  A                              ; And the MSB
 0000               INC  X                              ; Point to the second byte
 0000               ADC  A, 0                           ; 
 0000               ROMX                                ; Get the second byte
 0000               MOV  X,A                            ; Save it in X
 0000               POP  A                              ; And the first byte in A
 0000           MACRO   NULL_PTR_CHECK
 0000               SWAP    A, X                        ; LSB non-zero?
 0000               JNZ     .ok                         ; Exit on non-zero
 0000               SWAP    A, X                        ; MSB zero
 0000               JZ      @0                          ; Jump to the null pointer handler
 0000               JMP     .exit
 0000           .ok:
 0000               SWAP    A, X                        ; Put them back
 0000           .exit:
 0000           NULL_PTR:   EQU 0                       ; Null pointer value
 0000           
 0000           ;--------------------------------------------------
 0000           ; Transfer Descriptor--Data Source
 0000           ;--------------------------------------------------
 0000           USB_DS_ROM:                                      EQU 0x00
 0001           USB_DS_RAM:                                      EQU 0x01
 0002           USB_DS_RAM_CB:                                   EQU 0x02
 0003           USB_DS_RAM_MASK:                                 EQU 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; TRANSFER DESCRIPTOR MACROS
 0000           ;--------------------------------------------------
 0000           
 0000           ;-----------------------------------------------
 0000           ; TD_START_TABLE MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = Number of table entries
 0000           ; Register setup
 0000           ;   N/A (builds ROM data at assembly time)
 0000           ;-----------------------------------------------
 0000           MACRO   TD_START_TABLE
 0000               DB      ((@0) - 1)                 ; Number of table entries - 1
 0000           MACRO   TD_ENTRY
 0000               DB  @0                             ; Data source (USB_DS_*)
 0000               DW  @1                             ; Transfer size
 0000               DW  @2                             ; Data source address
 0000               DW  @3                             ; Transfer Completion Status Block Address
 0000               DB  0xde                           ; Reserved 
 0008           TD_ENTRY_SIZE:                         EQU 8
 0001           TD_START_SIZE:                         EQU 1
 0000           ;-----------------------------------------------
 0000           ; TD_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (restored)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   TD_INDEX_TO_OFFSET
 0000               PUSH    A                          ; Save a work register
 0000               ASL     [@0]                       ; Index * 2
 0000               ASL     [@0]                       ; Index * 4
 0000               ASL     [@0]                       ; Index * 4
 0000               POP     A                          ; Restore the work register
 0000           MACRO LT_START
 0000               DB      (@0)                       ; Table size
 0000           MACRO LT_ENTRY
 0000               DW      (@0)                       ; Table entry
 0000               DW      (@1)                       ; Table entry
 0002           LT_ENTRY_SIZE:                         EQU 2
 0001           LT_START_SIZE:                         EQU 1
 0000           
 0000           ;-----------------------------------------------
 0000           ; LT_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (not used)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   LT_INDEX_TO_OFFSET
 0000               ASL     [@0]                       ; Simply shift (mult by 2)
 0000               ASL     [@0]                       ;              (mult by 4)
 0000           MACRO DISPATCHER
 0000               CMP   A,@1
 0000               JNC   .dispatch_not_supported
 0000               ASL   A
 0000               JACC  @0
 0000           .dispatch_not_supported:
 0000               JMP  @2    
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           ; end of file USB_macro.inc
 0002           USB_bNumStringDescrs: EQU    2
 0000           
 0003           USB_NUM_ENDPOINTS:                          EQU 3 
 0002           USB_MAX_EP_NUMBER:                          EQU (USB_NUM_ENDPOINTS - 1) 
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers for USB API's.
 0000           ;--------------------------------------------------
 0074           USB_USBXCR:    EQU    USBXCR
 0040           USB_ADDR:      EQU    USBCR
 0041           USB_EP0CNT:    EQU    EP0CNT
 0042           USB_EP1CNT:    EQU    (EP0CNT + 1)
 0043           USB_EP2CNT:    EQU    (EP0CNT + 2)
 0044           USB_EP0MODE:   EQU    EP0MODE
 0045           USB_EP1MODE:   EQU    (EP0MODE + 1)
 0046           USB_EP2MODE:   EQU    (EP0MODE + 2)
 0050           USB_EP0DATA:   EQU    EP0DATA
 0058           USB_EP1DATA:   EQU    (EP0DATA + 8)
 0060           USB_EP2DATA:   EQU    (EP0DATA + 16)
 0000           
 0000           ;--------------------------------------------------
 0000           ; Endpoint 0 offsets (Table 9-2)
 0000           ;--------------------------------------------------
 0000           bmRequestType:                              EQU     0
 0001           bRequest:                                   EQU     1
 0002           wValue:                                     EQU     2
 0003           wValueHi:                                   EQU     3
 0002           wValueLo:                                   EQU     2
 0004           wIndex:                                     EQU     4
 0005           wIndexHi:                                   EQU     5
 0004           wIndexLo:                                   EQU     4
 0006           wLength:                                    EQU     6
 0007           wLengthHi:                                  EQU     7
 0006           wLengthLo:                                  EQU     6
 0000           
 0000           ;--------------------------------------------------
 0000           ; Request Types (Table 9-4)
 0000           ;--------------------------------------------------
 0000           USB_GET_STATUS:                             EQU    0x00
 0001           USB_CLEAR_FEATURE:                          EQU    0x01
 0003           USB_SET_FEATURE:                            EQU    0x03
 0005           USB_SET_ADDRESS:                            EQU    0x05
 0006           USB_GET_DESCRIPTOR:                         EQU    0x06
 0007           USB_SET_DESCRIPTOR:                         EQU    0x07
 0008           USB_GET_CONFIGURATION:                      EQU    0x08
 0009           USB_SET_CONFIGURATION:                      EQU    0x09
 000A           USB_GET_INTERFACE:                          EQU    0x0A
 000B           USB_SET_INTERFACE:                          EQU    0x0B
 000C           USB_SYNCH_FRAME:                            EQU    0x0C
 0000           
 0000           ;--------------------------------------------------
 0000           ; Descriptor Types (Table 9-5)
 0000           ;--------------------------------------------------
 0001           DESCR_TYPE_DEVICE:                          EQU     1
 0002           DESCR_TYPE_CONFIG:                          EQU     2
 0003           DESCR_TYPE_STRING:                          EQU     3
 0004           DESCR_TYPE_INTERFACE:                       EQU     4
 0005           DESCR_TYPE_ENDPOINT:                        EQU     5
 0006           DESCR_TYPE_DEVICE_QUALIFIER:                EQU     6
 0007           DESCR_TYPE_OTHER_SPEED:                     EQU     7
 0008           DESCR_TYPE_INTERFACE_POWER:                 EQU     8
 0000           
 0000           ;--------------------------------------------------
 0000           ; Feature Selectors (Table 9-6)
 0000           ;--------------------------------------------------
 0001           USB_DEVICE_REMOTE_WAKEUP:                   EQU    0x01
 0000           USB_ENDPOINT_HALT:                          EQU    0x00
 0002           USB_TEST_MODE:                              EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Device Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0000           USB_DEVICE_STATUS_BUS_POWERED:              EQU   0x00
 0001           USB_DEVICE_STATUS_SELF_POWERED:             EQU   0x01
 0002           USB_DEVICE_STATUS_REMOTE_WAKEUP:            EQU   0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0001           USB_ENDPOINT_STATUS_HALT:                   EQU    0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Directions
 0000           ;--------------------------------------------------
 0080           USB_DIR_IN:                                 EQU    0x80
 0000           USB_DIR_OUT:                                EQU    0x00
 007F           USB_DIR_UNUSED:                             EQU    0x7F
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Address Symbols 
 0000           ;--------------------------------------------------
 0000           EP0:                                        EQU    0x00
 0001           EP1:                                        EQU    0x01
 0002           EP2:                                        EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Endpoint States--These act as JACC jump values
 0000           ;--------------------------------------------------
 0000           USB_TRANS_STATE_IDLE:                       EQU     0x00
 0002           USB_TRANS_STATE_CONTROL_READ:               EQU     0x02
 0004           USB_TRANS_STATE_CONTROL_WRITE:              EQU     0x04
 0006           USB_TRANS_STATE_NO_DATA_CONTROL:            EQU     0x06
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Write flag values to indicate pending data changes
 0000           ;--------------------------------------------------
 0001           USB_ADDRESS_CHANGE_PENDING:     EQU     0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Constants for USB
 0000           ;--------------------------------------------------
 0080           USB_ADDR_ENABLE:                             EQU 0x80
 0040           USB_CNT_VALID:                               EQU 0x40
 0080           USB_CNT_TOGGLE:                             EQU 0x80
 0080           USB_PULLUP_ENABLE:                          EQU 0x80
 0000           
 0000           USB_MODE_DISABLE:                            EQU 0x00
 0001           USB_MODE_NAK_IN_OUT:                         EQU 0x01
 0002           USB_MODE_STATUS_OUT_ONLY:                    EQU 0x02
 0003           USB_MODE_STALL_IN_OUT:                       EQU 0x03
 0004           USB_MODE_RESERVED_0100:                      EQU 0x04
 0005           USB_MODE_ISO_OUT:                            EQU 0x05
 0006           USB_MODE_STATUS_IN_ONLY:                     EQU 0x06
 0007           USB_MODE_ISO_IN:                             EQU 0x07
 0008           USB_MODE_NAK_OUT:                            EQU 0x08
 0009           USB_MODE_ACK_OUT:                            EQU 0x09
 000A           USB_MODE_RESERVED_1010:                      EQU 0x0A
 000B           USB_MODE_ACK_OUT_STATUS_IN:                  EQU 0x0B
 000C           USB_MODE_NAK_IN:                             EQU 0x0C
 000D           USB_MODE_ACK_IN:                             EQU 0x0D
 000E           USB_MODE_RESERVED_1110:                      EQU 0x0E
 000F           USB_MODE_ACK_IN_STATUS_OUT:                  EQU 0x0F
 0080           USB_MODE_STALL_DATA_EP:                      EQU 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; FORCE J/K/SE0 (Argument values)
 0000           ;--------------------------------------------------
 0002           USB_FORCE_J:                                 EQU 0x02
 0001           USB_FORCE_K:                                 EQU 0x01
 0000           USB_FORCE_SE0:                               EQU 0x00
 00FF           USB_FORCE_NONE:                              EQU 0xFF
 0001           USB_FORCE_STATE:                             EQU 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Idle Timer (Argument values)
 0000           ;--------------------------------------------------
 0002           USB_IDLE_TIMER_RUNNING:                      EQU 0x02
 0001           USB_IDLE_TIMER_EXPIRED:                      EQU 0x01
 0000           USB_IDLE_TIMER_INDEFINITE:                   EQU 0x00
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_dev_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_07: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_08: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_dev_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_03: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_04: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_05: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_09: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ifc_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_09: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_10: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ifc_00: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ep_00: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ep_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_ep_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to Host (d2h) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_d2h_cls_ifc_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_cls_ifc_01: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_02: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to Device (h2d) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_cls_ifc_00: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_cls_ifc_09: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_10: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_11: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_cls_ifc_12: equ USB_NOT_SUPPORTED
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Standard Requests
 0000           ;-----------------------------------------------
 0001           USB_CB_h2d_std_dev: equ 1
 0001           USB_CB_h2d_std_ifc: equ 1
 0001           USB_CB_h2d_std_ep:  equ 1
 0000           USB_CB_h2d_std_oth: equ 0
 0001           USB_CB_d2h_std_dev: equ 1
 0001           USB_CB_d2h_std_ifc: equ 1
 0001           USB_CB_d2h_std_ep:  equ 1
 0000           USB_CB_d2h_std_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Class Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_cls_dev: equ 0
 0001           USB_CB_h2d_cls_ifc: equ 1
 0000           USB_CB_h2d_cls_ep:  equ 0
 0000           USB_CB_h2d_cls_oth: equ 0
 0000           USB_CB_d2h_cls_dev: equ 0
 0001           USB_CB_d2h_cls_ifc: equ 1
 0000           USB_CB_d2h_cls_ep:  equ 0
 0000           USB_CB_d2h_cls_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_vnd_dev: equ 0
 0000           USB_CB_h2d_vnd_ifc: equ 0
 0000           USB_CB_h2d_vnd_ep:  equ 0
 0000           USB_CB_h2d_vnd_oth: equ 0
 0000           USB_CB_d2h_vnd_dev: equ 0
 0000           USB_CB_d2h_vnd_ifc: equ 0
 0000           USB_CB_d2h_vnd_ep:  equ 0
 0000           USB_CB_d2h_vnd_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Reserved Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_rsv_dev: equ 0
 0000           USB_CB_h2d_rsv_ifc: equ 0
 0000           USB_CB_h2d_rsv_ep:  equ 0
 0000           USB_CB_h2d_rsv_oth: equ 0
 0000           USB_CB_d2h_rsv_dev: equ 0
 0000           USB_CB_d2h_rsv_ifc: equ 0
 0000           USB_CB_d2h_rsv_ep:  equ 0
 0000           USB_CB_d2h_rsv_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; Endpoint event flags
 0000           ;-----------------------------------------------
 0002           NO_EVENT_ALLOWED:   equ               2
 0001           EVENT_PENDING:      equ               1
 0000           NO_EVENT_PENDING:   equ               0
 0000           
 0000           IN_BUFFER_FULL:     equ               NO_EVENT_PENDING
 0001           IN_BUFFER_EMPTY:    equ               EVENT_PENDING
 0001           OUT_BUFFER_FULL:    equ               EVENT_PENDING
 0000           OUT_BUFFER_EMPTY:   equ               NO_EVENT_PENDING
 0000           
 0000           ;-----------------------------------------------
 0000           ; HID Descriptor Types
 0000           ;-----------------------------------------------
 0021           DESCR_TYPE_HID_CLASS:        equ      0x21
 0009           DESCR_SIZE_HID_CLASS:        equ      9
 0022           DESCR_TYPE_HID_REPORT:       equ      0x22
 0023           DESCR_TYPE_HID_PHYSICAL:     equ      0x23
 0000           
 0000           ;-----------------------------------------------
 0000           ; Transfer Completion Notification
 0000           ;-----------------------------------------------
 0000           USB_XFER_IDLE:         equ      0x00
 0001           USB_XFER_STATUS_ACK:   equ      0x01
 0002           USB_XFER_PREMATURE:    equ      0x02
 0003           USB_XFER_ERROR:        equ      0x03
 0000           
 0000           ; This macro is used to allocate a completion status block
 0000           ; for all Requests.  The macro parameter is used
 0000           ; to prefix the two data elements.
 0000           USB_XFER_STATUS:       equ      0
 0001           USB_XFER_LENGTH:       equ      1
 0000           MACRO    USB_XFER_STATUS_BLOCK
 0000               BLK    1    ; Completion Status
 0000               BLK    2    ; Transfer Length
 0000           USB_VSR_SUPPORT: EQU 0
                IF USB_CB_h2d_vnd_dev
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ifc
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ep
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_oth
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_dev
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ifc
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ep
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_oth
                USB_VSR_SUPPORT: EQU 1
                ENDIF
                
                ; end of file USB.inc
                
                ;-----------------------------------------------
                ;  Global Symbols
                ;-----------------------------------------------
                export  _USB_EP0_ISR
                export  USB_InitControlRead
                export  USB_InitControlWrite
                export  USB_InitNoDataStageControlTransfer
                export  USB_NoDataStageControlTransfer
                
                ;-----------------------------------------------
                ;  Macro Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ;  Constant Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                AREA bss (RAM,REL)
                ;----------------------------------------------------------------------------
                ; Current Device
                ;----------------------------------------------------------------------------
                EXPORT USB_bCurrentDevice
 0000           USB_bCurrentDevice:                     BLK   1    ;  Current Device
 0001           ;----------------------------------------------------------------------------
 0001           ; Current Configuration
 0001           ;----------------------------------------------------------------------------
                EXPORT USB_Configuration, _USB_Configuration
 0001           _USB_Configuration:
 0001            USB_Configuration:                     BLK   1    ;  Current Configuration
 0002           ;----------------------------------------------------------------------------
 0002           ; Current Device Status
 0002           ;----------------------------------------------------------------------------
                EXPORT USB_DeviceStatus
 0002            USB_DeviceStatus:                      BLK   1    ;  Current Device Status
 0003           ;----------------------------------------------------------------------------
 0003           ; Interface Setting
 0003           ;----------------------------------------------------------------------------
                EXPORT USB_InterfaceSetting
 0003            USB_InterfaceSetting:                  BLK   1    ; Interface Setting
 0004           ;----------------------------------------------------------------------------
 0004           ; Endpoint Status--USB Status
 0004           ;----------------------------------------------------------------------------
                EXPORT USB_EndpointStatus
 0004            USB_EndpointStatus:                    BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 0007           ;----------------------------------------------------------------------------
 0007           ; Last Packet Size
 0007           ;----------------------------------------------------------------------------
                EXPORT USB_LastSize
 0007            USB_LastSize:                          BLK   1    ;  Last Packet Size
 0008           ;----------------------------------------------------------------------------
 0008           ; Control Transfer State Machine
 0008           ; State values for Control Write
 0008           ; State values for Control Read
 0008           ;----------------------------------------------------------------------------
                EXPORT USB_TransferType
 0008            USB_TransferType:                      BLK   1    ; Control Transfer State Machine
 0009           ;----------------------------------------------------------------------------
 0009           ; Control Transfer Intermediate Buffer--Shared among the requests
 0009           ;----------------------------------------------------------------------------
                EXPORT USB_TransferBuffer
 0009            USB_TransferBuffer:                    BLK   8
 0011           ;----------------------------------------------------------------------------
 0011           ; Transfer Descriptor Data for Control Transfer
 0011           ;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
 0011           ;----------------------------------------------------------------------------
 0011           ; Control Transfer Data Source
 0011           ;   USB_DS_ROM
 0011           ;   USB_DS_RAM
 0011           ;   USB_DS_RAM_AS_NEEDED
 0011           ;----------------------------------------------------------------------------
                EXPORT USB_CurrentTD, _USB_CurrentTD
 0011            USB_CurrentTD:
 0011           _USB_CurrentTD:
                EXPORT USB_DataSource, _USB_DataSource
 0011            USB_DataSource:
 0011           _USB_DataSource:                       BLK   1
 0012           ;----------------------------------------------------------------------------
 0012           ; Control Transfer Data Size
 0012           ;----------------------------------------------------------------------------
                EXPORT USB_TransferSize, _USB_TransferSize
 0012            USB_TransferSize:
 0012            _USB_TransferSize:                    BLK   2
 0014           ;----------------------------------------------------------------------------
 0014           ; Control Transfer Data Pointer
 0014           ;   Source for Control Read
 0014           ;   Destination for Control Write
 0014           ;----------------------------------------------------------------------------
                EXPORT USB_DataPtr, _USB_DataPtr
 0014            USB_DataPtr:
 0014            _USB_DataPtr:                         BLK   2
 0016           ;----------------------------------------------------------------------------
 0016           ; Transfer Completion Notification
 0016           ;----------------------------------------------------------------------------
                EXPORT USB_StatusBlockPtr, _USB_StatusBlockPtr
 0016            USB_StatusBlockPtr:
 0016            _USB_StatusBlockPtr:                  BLK   2
 0018           ;----------------------------------------------------------------------------
 0018           ; Control Transfer _TransferByteCount (Actually transfered)
 0018           ;----------------------------------------------------------------------------
 0018            USB_TransferByteCount:                 BLK   2
 001A           ;----------------------------------------------------------------------------
 001A           ; Control Endpoint Data toggle
                EXPORT USB_EPDataToggle
 001A            USB_EPDataToggle:
 001A            USB_EP0DataToggle:                     BLK   1
 001B           ;----------------------------------------------------------------------------
 001B           ; Control Endpoint Data Pending Flag
                EXPORT USB_fDataPending
 001B            USB_fDataPending:                      BLK   1
 001C           ;----------------------------------------------------------------------------
 001C           ; Control Endpoint Data Pending Flag
 001C           ;EXPORT USB_PendingData
 001C           ; USB_PendingData:                      BLK   1
 001C           ;----------------------------------------------------------------------------
 001C           ; Temporary Data registers
                EXPORT USB_t2, USB_t1, USB_t0
 001C            USB_t2:                                BLK   1    ; Temporary shared by the UM
 001D            USB_t1:                                BLK   1    ; Temporary shared by the UM
 001E            USB_t0:                                BLK   1    ; Temporary shared by the UM
 001F           ;----------------------------------------------------------------------------
 001F           ; Endpoint Transfer--API Status
 001F           ;----------------------------------------------------------------------------
                EXPORT USB_EndpointAPIStatus, _USB_EndpointAPIStatus
 001F            USB_EndpointAPIStatus:
 001F           _USB_EndpointAPIStatus:                 BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 0022           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USB_EP0_ISR
                
                ;
                ;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
                ;                 dispaches all SETUP, IN, and OUT transfers to the proper
                ;                 dispatch routines for all supported USB requests.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:   n/a
                ;
                ;  RETURNS:     n/a
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
 0000            USB_EP0_ISR:
 0000           _USB_EP0_ISR:
 0000 08            PUSH    A                          ; Save the context
 0001 10            PUSH    X                          ; 
 0002               ; Dispatch to setup/in/out handlers
                EXPORT  USB_mode_read
 0002           USB_mode_read:
 0002 5D44         MOV    A, REG[USB_EP0MODE]           ; Get the mode reg   
 0004           
 0004           ; MSB is the SETUP bit, followed by IN, then OUT
 0004 64            asl    a                           ; Shift to the carry and jump if SETUP bit set    
 0005 C011          jc      USB_EP0_Setup
 0007           
 0007 64            asl    a                           ; Shift to the carry and jump if IN bit set
 0008 C02E          jc      USB_EP0_IN
 000A           
 000A 64            asl    a                           ; Shift to the carry and jump if OUT bit set
 000B C037          jc     USB_EP0_OUT
 000D 8258          JMP    USB_Not_Supported_Local_Drv
 000F           ; ISR Exit Point to update the mode register
 000F           ;   mode and count have been pushed onto the stack
                EXPORT USB_EP0_UPD_MODE_EXIT
 000F           USB_EP0_UPD_MODE_EXIT:
 000F           
 000F 6041          MOV    REG[USB_EP0CNT], A          ; Update the count   
 0011 5B            MOV    A, X                        ; Get the new mode
 0012 6044          MOV    REG[USB_EP0MODE], A         ; Update the node   
 0014           
 0014           USB_EP0_ISR_EXIT:
 0014               
 0014 20            POP X                              ; 
 0015 18            POP A                              ; Restore Context
 0016 7E            RETI
 0017           ;-----------------------------------------------------------------------------
 0017           ;  FUNCTION NAME: USB_EP0_Setup
 0017           ;
 0017           ;  DESCRIPTION:   Dispatch a USB SETUP 
 0017           ;
 0017           ;-----------------------------------------------------------------------------
 0017            USB_EP0_Setup:
 0017           _USB_EP0_Setup:
 0017           ; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
 0017 08            PUSH    A                          ; Save the mode register
 0018 5002          MOV     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
 001A 91DA          CALL    USB_UpdateStatusBlock
 001C 18            POP     A                          ; Restore the mode register
 001D 5D41          MOV    A, REG[USB_EP0CNT]                ; Get the count reg
 001F 394A          CMP    A, (USB_CNT_VALID | 0x0A)            
 0021 A003          JZ      .dispatch
 0023           
 0023 8242          JMP    USB_Not_Supported_Local_Drv
 0025           ;-----------------------------------------------------------------------------
 0025           ; Jump here to dispatch the request
 0025           ; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
 0025           ; 7,6,5,1,0 determine what the request is. Bits [2:4] are default to zero. The below code
 0025           ; re-organizes [bmRequestType] to the following format: 
 0025           ; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
 0025           ; "re-organization", the firmware will jump to an appropriate table to handle the request.      
 0025           ;-----------------------------------------------------------------------------
 0025           .dispatch:
 0025 5D50          MOV     A, REG[USB_EP0DATA+bmRequestType]   ; Get bmRequestType
 0027 21E3          AND     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
 0029 08            PUSH    A                                ; store value on the stack
 002A 67            ASR     A                                ; move bits 7-6-5 into 4-3-2's place
 002B 67            ASR     A                                ; "asr" instruction shift all bits one place to the right.
 002C 67            ASR     A                                ; Bit7 remains the same.
 002D 531C          MOV     [USB_t2], A                      ; store shifted value
 002F 18            POP     A                                ; get original value
 0030 2A1C          OR      A, [USB_t2]                      ; or the two to get the 5-bit field
 0032 211F          AND     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
 0034                                                        ; Bit0 is loaded with a Zero. This results in multiplying 
 0034                                                        ; the accumulator by 2, and the reason to mutiply it by 2 
 0034                                                        ; is that each "jmp" instruction in the tables is two bytes long.
 0034           
 0034 7D025D        LJMP USB_bmRequestType_Dispatch
 0037           ;-----------------------------------------------------------------------------
 0037           ;  FUNCTION NAME: USB_EP0_IN
 0037           ;
 0037           ;  DESCRIPTION:   Dispatch a USB IN
 0037           ;
 0037           ;-----------------------------------------------------------------------------
 0037            USB_EP0_IN:
 0037           _USB_EP0_IN:
 0037              
 0037 5108          MOV     A, [USB_TransferType]
 0039           USB_ControlInDispatch:               
 0039 E001          JACC    USB_ControlInDispatchTable
 003B           USB_ControlInDispatchTable:
 003B 822A          JMP     USB_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 003D 8037          JMP     USB_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
 003F 80AD          JMP     USB_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
 0041 80B8          JMP     USB_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL
 0043           ;-----------------------------------------------------------------------------
 0043           ;  FUNCTION NAME: USB_EP0_OUT
 0043           ;
 0043           ;  DESCRIPTION:   Dispatch a USB OUT
 0043           ;
 0043           ;-----------------------------------------------------------------------------
 0043            USB_EP0_OUT:
 0043           _USB_EP0_OUT:
 0043 5108          MOV     A, [USB_TransferType]
 0045 E001          JACC    USB_ControlOutDispatchTable
 0047           USB_ControlOutDispatchTable:
 0047 821E          JMP     USB_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 0049 802D          JMP     USB_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
 004B 805E          JMP     USB_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
 004D 80C6          JMP     USB_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL
 004F           ;-----------------------------------------------------------------------------
 004F           ;  FUNCTION NAME: USB_InitControlRead
 004F           ;
 004F           ;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
 004F           ;                 not called.  It assumes a tranfer descriptor has been loaded
 004F           ;                 into the driver USB_CurrentTD data structure.
 004F           ;
 004F           ;-----------------------------------------------------------------------------
 004F            USB_InitControlRead:
 004F 5307          MOV     [USB_LastSize], A          ; Save the packet size?
 0051 91B9          CALL    USB_InitializeStatusBlock
 0053 550802        MOV     [USB_TransferType], USB_TRANS_STATE_CONTROL_READ
 0056               
 0056               ; Check the transfer size against the request size
 0056 5D57          MOV    A, REG[USB_EP0DATA+wLengthHi] ; MSB of wLength
 0058 3A12          CMP    A, [USB_TransferSize]
 005A B007          JNZ    .L1
 005C           
 005C 5D56          MOV    A, REG[USB_EP0DATA+wLengthLo] ; LSB of wLength
 005E 3A13          CMP    A, [USB_TransferSize+1]
 0060 A009          JZ     .L9
 0062           .L1:
 0062 D007          JNC    .L9
 0064           ;    
 0064 5313          MOV    [USB_TransferSize+1], A     ; 
 0066 5D57          MOV    A, REG[USB_EP0DATA+wLengthHi] ; 
 0068 5312          MOV    [USB_TransferSize], A       ; 
 006A           .L9:
 006A 551800        MOV    [USB_TransferByteCount], 0  ; 
 006D 551900        MOV    [USB_TransferByteCount+1], 0; 
 0070           
 0070 2E1A01        OR     [USB_EP0DataToggle], 1 ; setup EP0 data toggle
 0073 80AA          JMP    USB_LoadEndpoint            ; 
 0075           ;-----------------------------------------------------------------------------
 0075           ;  FUNCTION NAME: USB_ControlReadDataStage
 0075           ;
 0075           ;  DESCRIPTION:   This routine processes the data stage of a control read.  It
 0075           ;                 must be JUMPed to, not called.  It assumes a tranfer descriptor
 0075           ;                 has been loaded into the driver USB_CurrentTD
 0075           ;                 data structure.
 0075           ;
 0075           ;-----------------------------------------------------------------------------
 0075            USB_ControlReadDataStage:
 0075 80A8          JMP     USB_LoadEndpoint
 0077           
 0077           ;-----------------------------------------------------------------------------
 0077           ;  FUNCTION NAME: USB_ControlReadStatusStage
 0077           ;
 0077           ;  DESCRIPTION:   This routine processes the status stage of a control read.  It
 0077           ;                 must be JUMPed to, not called.  It handles short or 0 packet
 0077           ;                 It assumes a tranfer descriptor has been loaded into the
 0077           ;                 driver USB_CurrentTD data structure.
 0077           ;
 0077           ;-----------------------------------------------------------------------------
 0077            USB_ControlReadStatusStage:
 0077 5107          MOV    A, [USB_LastSize]           ; Get the number of bytes from the last transfer
 0079 0419          ADD    [USB_TransferByteCount + 1], A ; Update the transfer byte count 
 007B 0E1800        ADC    [USB_TransferByteCount], 0  ; 
 007E 5001          MOV    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 0080 9174          CALL   USB_UpdateStatusBlock
 0082 550800        MOV    [USB_TransferType], USB_TRANS_STATE_IDLE
 0085 5000          MOV    A, 0                        ; Count Register
 0087 5703          MOV    X, USB_MODE_STALL_IN_OUT
 0089 8F85          JMP    USB_EP0_UPD_MODE_EXIT
 008B           ;-----------------------------------------------------------------------------
 008B           ;  FUNCTION NAME: USB_NoDataStageControlTransfer
 008B           ;                 USB_InitNoDataStageControlTransfer
 008B           ;
 008B           ;  DESCRIPTION:   This routine processes the status stage of a no data control
 008B           ;                 write.  It must be JUMPed to, not called.
 008B           ;
 008B           ;-----------------------------------------------------------------------------
 008B            USB_NoDataStageControlTransfer:
 008B            USB_InitNoDataStageControlTransfer:
 008B 917F          CALL    USB_InitializeStatusBlock
 008D           
 008D 550806        MOV    [USB_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL
 0090               
 0090 5000          MOV    A, 0                        ; Count Register
 0092 5706          MOV    X, USB_MODE_STATUS_IN_ONLY
 0094 8F7A          JMP    USB_EP0_UPD_MODE_EXIT
 0096           ;-----------------------------------------------------------------------------
 0096           ;  FUNCTION NAME: USB_InitControlWrite
 0096           ;
 0096           ;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
 0096           ;                 to, not called.  It assumes a tranfer descriptor has been loaded
 0096           ;                 into the driver USB_CurrentTD data structure.
 0096           ;
 0096           ;-----------------------------------------------------------------------------
 0096            USB_InitControlWrite:
 0096 5111          MOV     A, [USB_DataSource]        ; Need to make sure the destination is not ROM
 0098 3900          CMP     A, USB_DS_ROM
 009A A1CB          JZ      USB_Not_Supported_Local_Drv
 009C           
 009C 916E          CALL    USB_InitializeStatusBlock
 009E           
 009E 550804        MOV    [USB_TransferType], USB_TRANS_STATE_CONTROL_WRITE
 00A1           
 00A1 2E1A01        OR     [USB_EP0DataToggle], 1 ; setup EP0 data toggle
 00A4           
 00A4 5000          MOV    A, 0                        ; Count Register
 00A6 570B          MOV    X, USB_MODE_ACK_OUT_STATUS_IN
 00A8 8F66          JMP    USB_EP0_UPD_MODE_EXIT
 00AA           ;-----------------------------------------------------------------------------
 00AA           ;  FUNCTION NAME: USB_ControlWriteDataStage
 00AA           ;
 00AA           ;  DESCRIPTION:   This routine processes the data stage of a control
 00AA           ;                 write.  It must be JUMPed to, not called.  It assumes a 
 00AA           ;                 tranfer descriptor has been loaded into the driver 
 00AA           ;                 USB_CurrentTD data structure.
 00AA           ;
 00AA           ;-----------------------------------------------------------------------------
 00AA            USB_ControlWriteDataStage:
 00AA 361A01        XOR    [USB_EP0DataToggle], 1      ; Update data toggle
 00AD           
 00AD 5D41          MOV    A,REG[USB_EP0CNT]           ; Get the count
 00AF           
 00AF 210F          AND     A, 0x0F
 00B1 1102          SUB     A, 2                       ; Count include the two byte checksum
 00B3           
 00B3 531C          MOV     [USB_t2], A                ; Assume we have room to receive the whole packet             
 00B5           
 00B5 5000          MOV     A, 0
 00B7 3A12          CMP     A, [USB_TransferSize]      ; If the MSB has anything just use the count
 00B9 B007          JNZ     .L1
 00BB           
 00BB 511C          MOV     A, [USB_t2]
 00BD 3A13          CMP     A, [USB_TransferSize+1]    ; 
 00BF A006          JZ      .L6
 00C1           .L1:
 00C1 C004          JC      .L6
 00C3 5F1C13        MOV     [USB_t2], [USB_TransferSize+1]
 00C6           
 00C6           .L6: 
 00C6 511C          MOV     A, [USB_t2]
 00C8 1413          SUB     [USB_TransferSize+1],A     ; Update the bytes remaining
 00CA 1E1200        SBB     [USB_TransferSize], 0      ;
 00CD           
 00CD 0419          ADD     [USB_TransferByteCount + 1], A ; Update the transfer byte count 
 00CF 0E1800        ADC     [USB_TransferByteCount], 0 ; 
 00D2           
 00D2 5700          MOV     X,0                        ; Start the index at 0
 00D4           
 00D4           .RAM_COPY:
 00D4 5E50          MOV     A, REG[X+USB_EP0DATA]      ; Get the data
 00D6 3F15          MVI     [USB_DataPtr+1], A         ; Store the data, bump the destination
 00D8           
 00D8 75            INC     X                          ; Bump the destination offset
 00D9 5B            MOV     A,X                        ; Are we done?
 00DA 3A1C          CMP     A, [USB_t2]
 00DC CFF7          JC      .RAM_COPY                  ; Not done
 00DE           
 00DE 5000          MOV    A, 0                        ; Count Register
 00E0 570B          MOV    X, USB_MODE_ACK_OUT_STATUS_IN
 00E2 8F2C          JMP    USB_EP0_UPD_MODE_EXIT
 00E4           
 00E4           ; Jump here on data toggle error
 00E4           .error:
 00E4 550800        MOV    [USB_TransferType], USB_TRANS_STATE_IDLE  ; This simply aborts the transfer
 00E7 5000          MOV    A, 0                        ; Count Register
 00E9 5703          MOV    X, USB_MODE_STALL_IN_OUT
 00EB 8F23          JMP    USB_EP0_UPD_MODE_EXIT
 00ED           ;-----------------------------------------------------------------------------
 00ED           ;  FUNCTION NAME: USB_ControlWriteStatusStage
 00ED           ;
 00ED           ;  DESCRIPTION:   This routine processes the status stage of a control
 00ED           ;                 write.  It must be JUMPed to, not called.  It assumes a 
 00ED           ;                 tranfer descriptor has been loaded into the driver 
 00ED           ;                 USB_CurrentTD data structure.
 00ED           ;
 00ED           ;-----------------------------------------------------------------------------
 00ED            USB_ControlWriteStatusStage:
 00ED 5001          MOV    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 00EF 9105          CALL   USB_UpdateStatusBlock
 00F1 550800        MOV    [USB_TransferType], USB_TRANS_STATE_IDLE  ; The packet is done
 00F4 5000          MOV    A, 0                        ; Count Register
 00F6 5703          MOV    X, USB_MODE_STALL_IN_OUT
 00F8 8F16          JMP    USB_EP0_UPD_MODE_EXIT
 00FA           ;-----------------------------------------------------------------------------
 00FA           ;  FUNCTION NAME: USB_NoDataControlStatusStage
 00FA           ;
 00FA           ;  DESCRIPTION:   This routine processes the status stage of a control
 00FA           ;                 write.  It must be JUMPed to, not called.  It assumes a 
 00FA           ;                 tranfer descriptor has been loaded into the driver 
 00FA           ;                 USB_CurrentTD data structure.
 00FA           ;
 00FA           ;                 USB Device Addressing happens here because we can't change
 00FA           ;                 the SIE Address before the Status IN is received.                 
 00FA           ;
 00FA           ;-----------------------------------------------------------------------------
 00FA            USB_NoDataControlStatusStage:
 00FA 5001          MOV     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
 00FC 90F8          CALL    USB_UpdateStatusBlock
 00FE               ; Dispatch to the proper handler
 00FE 3C1B01        CMP     [USB_fDataPending], USB_ADDRESS_CHANGE_PENDING
 0101 B009          JNZ     .L1
 0103           
 0103               ; USB ADDRESS CHANGE
 0103 5109          MOV     A, [USB_TransferBuffer]    ; Get the pending data
 0105           
 0105 2980          OR      A, USB_ADDR_ENABLE         ; Set the enable bit
 0107 6040          MOV     REG[USB_ADDR], A           ; Update the SIE address
 0109 8001          JMP     .EXIT
 010B           .L1:
 010B           
 010B           .EXIT:
 010B 551B00        MOV     [USB_fDataPending], 0      ; Clear data pending
 010E           
 010E 5000          MOV    A, 0                        ; Count Register
 0110 5706          MOV    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
 0112 8EFC          JMP    USB_EP0_UPD_MODE_EXIT
 0114           ;-----------------------------------------------------------------------------
 0114           ;  FUNCTION NAME: USB_NoDataControlError
 0114           ;
 0114           ;  DESCRIPTION:   This routine handles the condition when we expected a
 0114           ;                 status IN, but receive an OUT
 0114           ;
 0114           ;-----------------------------------------------------------------------------
 0114            USB_NoDataControlError:
 0114 5003          MOV    A, USB_XFER_ERROR           ; Return Transaction Error
 0116 90DE          CALL   USB_UpdateStatusBlock
 0118 5000          MOV    A, 0                        ; Count Register
 011A 5703          MOV    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
 011C 8EF2          JMP    USB_EP0_UPD_MODE_EXIT
 011E           ;-----------------------------------------------------------------------------
 011E           ;  FUNCTION NAME: USB_LoadEndpoint
 011E           ;
 011E           ;  DESCRIPTION:  Load the endpoint buffer with the next data for the control
 011E           ;                transfer.  It assumes a tranfer descriptor has been loaded
 011E           ;                into the driver USB_CurrentTD data structure.
 011E           ;
 011E           ;-----------------------------------------------------------------------------
 011E           USB_LoadEndpoint:
 011E 5107          MOV     A, [USB_LastSize]          ; Get the number of bytes from the last transfer
 0120 0419          ADD     [USB_TransferByteCount + 1], A ; Update the transfer byte count 
 0122 0E1800        ADC     [USB_TransferByteCount], 0 ; 
 0125 5112          MOV     A,  [USB_TransferSize]     ; Check to see if we have any
 0127 2A13          OR      A,  [USB_TransferSize+1]   ;  more data to send
 0129 B00E          JNZ     .cont                      ; Jump if we have to send more data
 012B           
 012B           ; Flow here if there is no more data to send
 012B 3C0708        CMP     [USB_LastSize], 8          ; Was it a full packet?
 012E A047          JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)
 0130           
 0130           ; Flow here if we are entering the status stage
 0130 5000          MOV    A, 0                        ; Count Register
 0132 5307          MOV    [USB_LastSize], A           ; Clear the byte count
 0134 5702          MOV    X, USB_MODE_STATUS_OUT_ONLY ; Only ACK the Status Out
 0136 8ED8          JMP    USB_EP0_UPD_MODE_EXIT
 0138           
 0138           ; Jump here to determine how many bytes should we transfer
 0138           .cont:
 0138 3C1200        CMP     [USB_TransferSize], 0      ; Check the MSB
 013B B00A          JNZ     .L1
 013D           
 013D 3C1308        CMP     [USB_TransferSize+1], 8    ; Check the LSB
 0140 D005          JNC     .L1
 0142           
 0142 5113          MOV     A,[USB_TransferSize+1]     ; Transfer all the remaing data
 0144 8003          JMP     .L3
 0146               
 0146           .L1:
 0146 5008          MOV     A, 8                       ; Just transfer the next 8 bytes
 0148           
 0148           .L3:
 0148            
 0148 1413          SUB     [USB_TransferSize+1],A     ; Update the bytes remaining
 014A 1E1200        SBB     [USB_TransferSize],0 
 014D           
 014D 531C          MOV     [USB_t2],A                 ; Save the count             
 014F 5700          MOV     X,0
 0151               
 0151 3C1100        CMP     [USB_DataSource],USB_DS_ROM  ; RAM or ROM copy?
 0154 B017          JNZ     .RAM_COPY
 0156           
 0156           ; Copy data from a ROM source
 0156           .ROM_COPY:
 0156 10            PUSH    X                          ; Save the destination offset
 0157 5114          MOV     A,[USB_DataPtr]            ; Get the transfer source MSB
 0159 5815          MOV     X,[USB_DataPtr+1]          ; Set the transfer source LSB
 015B 7615          INC     [USB_DataPtr+1]            ; Increment the data pointer
 015D 0E1400        ADC     [USB_DataPtr], 0           ;   MSB if necessary
 0160           
 0160 28            ROMX                               ; Get the data byte
 0161           
 0161 20            POP     X                          ; Get the destination offset
 0162 6150          MOV     REG[X + USB_EP0DATA], A    ; Load the data
 0164 75            INC     X                          ; Bump the destination offset
 0165 5B            MOV     A,X                        ; Are we done?
 0166 3A1C          CMP     A, [USB_t2]
 0168 CFED          JC      .ROM_COPY                  ; Not done
 016A 800B          JMP     .START_TRANSFER            ; Otherwise go start the transfer
 016C           
 016C           ; Copy data from a RAM source
 016C           .RAM_COPY:
 016C 3E15          MVI     A, [USB_DataPtr+1]         ; Get the data, bump the source
 016E           
 016E 6150          MOV     REG[X +USB_EP0DATA], A     ; Load the data
 0170 75            INC     X                          ; Bump the destination offset
 0171 5B            MOV     A,X                        ; Are we done?
 0172 3A1C          CMP     A, [USB_t2]
 0174 CFF7          JC      .RAM_COPY                  ; Not done
 0176           
 0176           ;; Set up the IN transfer count/mode/etc
 0176           ;    A contains the byte count
 0176           .START_TRANSFER:
 0176 5307          MOV     [USB_LastSize], A          ; Save the packet size
 0178           
 0178 5001          MOV     A, 1
 017A 221A          AND     A, [USB_EP0DataToggle]
 017C A003          JZ      .BYPASS_T1
 017E 5080          MOV     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle
 0180           
 0180           .BYPASS_T1:
 0180 2A07          OR      A, [USB_LastSize]
 0182 361A01        XOR     [USB_EP0DataToggle], 1     ; Update the data toggle for next time
 0185           
 0185 570F          MOV    X, USB_MODE_ACK_IN_STATUS_OUT  ; Set the mode register
 0187 8E87          JMP    USB_EP0_UPD_MODE_EXIT
 0189           ;-----------------------------------------------------------------------------
 0189           ;  FUNCTION NAME: USB_GetTableEntry
 0189           ;
 0189           ;  DESCRIPTION:   Copies a TD to the USB_CurrentTD data structure.
 0189           ;
 0189           ;-----------------------------------------------------------------------------
                EXPORT USB_GetTableEntry
 0189           USB_GetTableEntry:
 0189           
 0189 75            INC     X                          ; Point to the first table entry
 018A 0900          ADC     A, 0                       ;
 018C           
 018C 08            PUSH    A                          ; Save a work register
 018D 651C          ASL     [USB_t2]                       ; Index * 2
 018F 651C          ASL     [USB_t2]                       ; Index * 4
 0191 651C          ASL     [USB_t2]                       ; Index * 4
 0193 18            POP     A                          ; Restore the work register
 0194           
 0194 4B            SWAP    A, X
 0195 021C          ADD     A, [USB_t2]
 0197 4B            SWAP    A, X
 0198 0900          ADC     A, 0                       ; A:X now points to the descriptor table entry we want
 019A           
 019A           ; Flow here to load the Transfer Descriptor (TD_ENTRY)
 019A 551C11        MOV     [USB_t2], USB_CurrentTD    ; Use Temp as MVI pointer
 019D 9026          CALL     USB_GETBYTE               ; Get the descriptor data source
 019F 901C          CALL     USB_GETWORD               ; Get the descriptor size
 01A1 901A          CALL     USB_GETWORD               ; Get the descriptor address
 01A3 9018          CALL     USB_GETWORD               ; Get the Status Pointer
 01A5           ; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
 01A5 5D50          MOV    A, REG[USB_EP0DATA+bmRequestType]; Get bmRequestType
 01A7 2180          AND     A,0x80                          ; Control Read or Write
 01A9 A003          JZ      .control_write
 01AB           
 01AB 8EA3          JMP     USB_InitControlRead
 01AD           
 01AD           .control_write:
 01AD 8EE8          JMP     USB_InitControlWrite
 01AF           
 01AF           ;-----------------------------------------------------------------------------
 01AF           ;  FUNCTION NAME: USB_LOOKUP
 01AF           ;
 01AF           ;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
 01AF           ;
 01AF           ;-----------------------------------------------------------------------------
 01AF           ;
 01AF           ;  ARGUMENTS:    A:X Point to the lookup table
 01AF           ;                USB_t2 contain the table index
 01AF           ;
 01AF           ;  RETURNS:      Address of the LT_ENTRY in A:X
 01AF           ;
 01AF           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01AF           ;
 01AF           ;  THEORY of OPERATION or PROCEDURE:
 01AF           ;
 01AF           ;-----------------------------------------------------------------------------
                EXPORT USB_LOOKUP
 01AF           USB_LOOKUP:
 01AF 75            INC     X                          ; Point to the first table entry
 01B0 0900          ADC     A, 0                       ;
 01B2           
 01B2 651C          ASL     [USB_t2]                       ; Simply shift (mult by 2)
 01B4 651C          ASL     [USB_t2]                       ;              (mult by 4)
 01B6 4B            SWAP    A, X
 01B7 021C          ADD     A, [USB_t2]                ;
 01B9 4B            SWAP    A, X
 01BA 0900          ADC     A, 0
 01BC 7F            RET
 01BD           ;-----------------------------------------------------------------------------
 01BD           ;  FUNCTION NAME: USB_GETWORD/USB_GETBYTE
 01BD           ;
 01BD           ;  DESCRIPTION:    Get a word value from ROM
 01BD           ;
 01BD           ;-----------------------------------------------------------------------------
 01BD           ;
 01BD           ;  ARGUMENTS:    A:X is the ROM Address
 01BD           ;                USB_t2 is the destination address
 01BD           ;
 01BD           ;  RETURNS:      USB_t1
 01BD           ;
 01BD           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01BD           ;                USES USB_t2
 01BD           ;                A:X points to the subsequent locaction ROM location
 01BD           ;  THEORY of OPERATION or PROCEDURE:
 01BD           ;
 01BD           ;-----------------------------------------------------------------------------
                EXPORT USB_GETWORD
 01BD           USB_GETWORD:
 01BD           
 01BD 08            PUSH    A                          ; Don't loose the pointer MSB
 01BE 28            ROMX                               ; Data source flag
 01BF 3F1C          MVI     [USB_t2], A                ; Save the data source
 01C1 18            POP     A                          ; Get the MSB back
 01C2 75            INC     X                          ; Point to the next  entry
 01C3 0900          ADC     A, 0                       ;
 01C5           
                EXPORT USB_GETBYTE
 01C5           USB_GETBYTE:
 01C5           
 01C5 08            PUSH    A                          ; Don't loose the pointer MSB
 01C6 28            ROMX                               ; Data source flag
 01C7 3F1C          MVI     [USB_t2], A                ; Save the data source
 01C9 18            POP     A                          ; Get the MSB back
 01CA 75            INC     X                          ; Point to the next  entry
 01CB 0900          ADC     A, 0                       ;
 01CD 7F            RET
 01CE           ;-----------------------------------------------------------------------------
 01CE           ;  FUNCTION NAME: USB_GET_DEVICE_TABLE_ENTRY
 01CE           ;
 01CE           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 01CE           ;                  Not intended for use by C fucntions 
 01CE           ;
 01CE           ;-----------------------------------------------------------------------------
 01CE           ;
 01CE           ;  ARGUMENTS:
 01CE           ;
 01CE           ;  RETURNS:        A:X points the the current DEVICE_TABLE entry
 01CE           ;                  Carry flag is set if the current device index is out of range
 01CE           ;
 01CE           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01CE           ;
 01CE           ;  THEORY of OPERATION or PROCEDURE:
 01CE           ;
 01CE           ;-----------------------------------------------------------------------------
                EXPORT USB_GET_DEVICE_TABLE_ENTRY
 01CE           USB_GET_DEVICE_TABLE_ENTRY:
 01CE 5F1C00        MOV     [USB_t2], [USB_bCurrentDevice]  ; Use the UM temp var--Selector
 01D1           
 01D1 5000          MOV     A,>USB_DEVICE_LOOKUP       ; Get the ROM Address MSB
 01D3 5700          MOV     X,<USB_DEVICE_LOOKUP       ; Get the ROM Address LSB
 01D5 28            ROMX                               ; First entry is the table size (only a byte)
 01D6 3A1C          CMP     A, [USB_t2]                ; Range check
 01D8 5000          MOV     A,>USB_DEVICE_LOOKUP       ; Get the ROM Address MSB
 01DA C003          JC      .exit
 01DC           ; Flow here if the index is valid
 01DC 9FD1          CALL    USB_LOOKUP                 ; Look up the configuration
 01DE           ; Jump or flow here on exit
 01DE           .exit:
 01DE 7F            RET
 01DF           ;-----------------------------------------------------------------------------
 01DF           ;  FUNCTION NAME: USB_GET_CONFIG_TABLE_ENTRY
 01DF           ;
 01DF           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 01DF           ;                  Not intended for use by C fucntions
 01DF           ;                  Does not do range checking on  
 01DF           ;
 01DF           ;-----------------------------------------------------------------------------
 01DF           ;
 01DF           ;  ARGUMENTS:
 01DF           ;
 01DF           ;  RETURNS:        A:X points the the current CONFIG_TABLE entry
 01DF           ;                  Carry flag is set if the current device index is out of range
 01DF           ;
 01DF           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01DF           ;
 01DF           ;  THEORY of OPERATION or PROCEDURE:
 01DF           ;
 01DF           ;-----------------------------------------------------------------------------
                EXPORT USB_GET_CONFIG_TABLE_ENTRY
 01DF           USB_GET_CONFIG_TABLE_ENTRY:
 01DF 9FED          CALL    USB_GET_DEVICE_TABLE_ENTRY ; Get the selected device
 01E1 551C1D        MOV     [USB_t2],USB_t1            ; Set the GETWORD destination 
 01E4 9FD7          CALL    USB_GETWORD                ; Get the pointer to the CONFIG_LOOKUP table
 01E6                                                  ; ITempW has the address
 01E6 5D52          MOV     A, REG[USB_EP0DATA+wValueLo]  ; Get the configuration number
 01E8 531C          MOV     [USB_t2],A                 ; Save it 
 01EA 511D          MOV     A, [USB_t1]                ; Get the CONFIG_LOOKUP ROM Address MSB
 01EC 581E          MOV     X, [USB_t1+1]              ; Get the CONFIG_LOOKUP ROM Address LSB
 01EE           
 01EE           ; A:X Points to the CONFIG_LOOKUP, so get the current entry        
 01EE 5F1C01        MOV     [USB_t2], [USB_Configuration] ; Get the configuration number
 01F1 7A1C          DEC     [USB_t2]                   ; We don't populate the 0th entry
 01F3 9FBA          CALL    USB_LOOKUP                 ; Look up the configuration
 01F5 7F            RET
 01F6           ;-----------------------------------------------------------------------------
 01F6           ;  FUNCTION NAME: USB_UpdateStatusBlock
 01F6           ;
 01F6           ;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
 01F6           ;                  block is updated with the completion code from the
 01F6           ;                  argument (A) and the _TransferByteCount.
 01F6           ;                  
 01F6           ;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
 01F6           ;                  to make sure no other updates are made to the StatusBlock by
 01F6           ;                  the USB User Module.
 01F6           ;
 01F6           ;-----------------------------------------------------------------------------
 01F6           ;
 01F6           ;  ARGUMENTS:      A contains the Completion Status Code
 01F6           ;
 01F6           ;  RETURNS:        None
 01F6           ;
 01F6           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01F6           ;
 01F6           ;  THEORY of OPERATION or PROCEDURE:
 01F6           ;
 01F6           ;-----------------------------------------------------------------------------
 01F6           USB_UpdateStatusBlock:
 01F6 5817          MOV     X, [USB_StatusBlockPtr + 1];
 01F8 4B            SWAP    A, X                       ; Don't loose the completion code
 01F9 3900          CMP     A, 0                       ; NULL?
 01FB A00F          JZ      .done                      ; No update on NULL
 01FD           ; Flow here to update the VSR Completion Status Block
 01FD 4B            SWAP    A, X                       ; Completion code A, Pointer in X
 01FE 5400          MOV     [X + 0], A                 ; Update the completion Code 
 0200 5118          MOV     A, [USB_TransferByteCount] ; Actual Byte Count MSB
 0202 5401          MOV     [X + 1], A
 0204 5119          MOV     A, [USB_TransferByteCount + 1] ; Actual Byte Count LSB
 0206 5402          MOV     [X + 2], A
 0208 551700        MOV     [USB_StatusBlockPtr + 1], 0; Clear the Block Pointer    
 020B           .done:
 020B 7F            RET                                ; All done
 020C           ;-----------------------------------------------------------------------------
 020C           ;  FUNCTION NAME: USB_InitializeStatusBlock
 020C           ;
 020C           ;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
 020C           ;                  The completion code is set to USB_XFER_IDLE.
 020C           ;                  
 020C           ;-----------------------------------------------------------------------------
 020C           ;
 020C           ;  ARGUMENTS:      None
 020C           ;
 020C           ;  RETURNS:        None
 020C           ;
 020C           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 020C           ;
 020C           ;  THEORY of OPERATION or PROCEDURE:
 020C           ;
 020C           ;-----------------------------------------------------------------------------
 020C           USB_InitializeStatusBlock:
 020C 5117          MOV     A, [USB_StatusBlockPtr + 1];
 020E 3900          CMP     A, 0                       ; NULL?
 0210 A00B          JZ      .done                      ; No update on NULL
 0212           ; Flow here to initialize the Completion Status Block
 0212 4B            SWAP    A, X                       ; Pointer in X
 0213 560000        MOV     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0) 
 0216 551800        MOV     [USB_TransferByteCount], 0 ; Clear the byte count 
 0219 551900        MOV     [USB_TransferByteCount + 1], 0 ; 
 021C           .done:
 021C 7F            RET                                ; All done
 021D           ;-----------------------------------------------------------------------------
 021D           ;  FUNCTION NAME: ;  USB 1st Tier Dispactch Jump Table (based on bmRequestType)
 021D           ;
 021D           ;  DESCRIPTION:
 021D           ;
 021D           ;-----------------------------------------------------------------------------
 021D           ;
 021D           ;  ARGUMENTS:
 021D           ;
 021D           ;  RETURNS:
 021D           ;
 021D           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 021D           ;
 021D           ;  THEORY of OPERATION or PROCEDURE:
 021D           ;
 021D           ;-----------------------------------------------------------------------------
 021D           MACRO BMREQUEST_DISPATCH
 021D           IF (USB_CB_@0_@1_@2 & 1)
 021D               jmp     USB_DT_@0_@1_@2_Dispatch
 021D           ELSE
 021D               jmp     USB_Not_Supported_Local_Drv
 021D           ENDIF
 021D           USB_DT_bmRequestType::
                IF (USB_CB_h2d_std_dev & 1)
 021D 8000          jmp     USB_DT_h2d_std_dev_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ifc & 1)
 021F 8000          jmp     USB_DT_h2d_std_ifc_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ep & 1)
 0221 8000          jmp     USB_DT_h2d_std_ep_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_oth & 1)
                    jmp     USB_DT_h2d_std_oth_Dispatch
                ELSE
 0223 8042          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_dev & 1)
                    jmp     USB_DT_h2d_cls_dev_Dispatch
                ELSE
 0225 8040          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ifc & 1)
 0227 8000          jmp     USB_DT_h2d_cls_ifc_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ep & 1)
                    jmp     USB_DT_h2d_cls_ep_Dispatch
                ELSE
 0229 803C          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_oth & 1)
                    jmp     USB_DT_h2d_cls_oth_Dispatch
                ELSE
 022B 803A          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_dev & 1)
                    jmp     USB_DT_h2d_vnd_dev_Dispatch
                ELSE
 022D 8038          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ifc & 1)
                    jmp     USB_DT_h2d_vnd_ifc_Dispatch
                ELSE
 022F 8036          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ep & 1)
                    jmp     USB_DT_h2d_vnd_ep_Dispatch
                ELSE
 0231 8034          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_oth & 1)
                    jmp     USB_DT_h2d_vnd_oth_Dispatch
                ELSE
 0233 8032          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_dev & 1)
                    jmp     USB_DT_h2d_rsv_dev_Dispatch
                ELSE
 0235 8030          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ifc & 1)
                    jmp     USB_DT_h2d_rsv_ifc_Dispatch
                ELSE
 0237 802E          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ep & 1)
                    jmp     USB_DT_h2d_rsv_ep_Dispatch
                ELSE
 0239 802C          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_oth & 1)
                    jmp     USB_DT_h2d_rsv_oth_Dispatch
                ELSE
 023B 802A          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_dev & 1)
 023D 8000          jmp     USB_DT_d2h_std_dev_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ifc & 1)
 023F 8000          jmp     USB_DT_d2h_std_ifc_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ep & 1)
 0241 8000          jmp     USB_DT_d2h_std_ep_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_oth & 1)
                    jmp     USB_DT_d2h_std_oth_Dispatch
                ELSE
 0243 8022          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_dev & 1)
                    jmp     USB_DT_d2h_cls_dev_Dispatch
                ELSE
 0245 8020          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ifc & 1)
 0247 8000          jmp     USB_DT_d2h_cls_ifc_Dispatch
                ELSE
                    jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ep & 1)
                    jmp     USB_DT_d2h_cls_ep_Dispatch
                ELSE
 0249 801C          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_oth & 1)
                    jmp     USB_DT_d2h_cls_oth_Dispatch
                ELSE
 024B 801A          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_dev & 1)
                    jmp     USB_DT_d2h_vnd_dev_Dispatch
                ELSE
 024D 8018          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ifc & 1)
                    jmp     USB_DT_d2h_vnd_ifc_Dispatch
                ELSE
 024F 8016          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ep & 1)
                    jmp     USB_DT_d2h_vnd_ep_Dispatch
                ELSE
 0251 8014          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_oth & 1)
                    jmp     USB_DT_d2h_vnd_oth_Dispatch
                ELSE
 0253 8012          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_dev & 1)
                    jmp     USB_DT_d2h_rsv_dev_Dispatch
                ELSE
 0255 8010          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ifc & 1)
                    jmp     USB_DT_d2h_rsv_ifc_Dispatch
                ELSE
 0257 800E          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ep & 1)
                    jmp     USB_DT_d2h_rsv_ep_Dispatch
                ELSE
 0259 800C          jmp     USB_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_oth & 1)
                    jmp     USB_DT_d2h_rsv_oth_Dispatch
                ELSE
 025B 800A          jmp     USB_Not_Supported_Local_Drv
                ENDIF
 025D           USB_DT_End:
 0020           USB_DT_Size: equ (USB_DT_End-USB_DT_bmRequestType) / 2
 025D           USB_bmRequestType_Dispatch::
 025D 3920          CMP   A,USB_DT_Size
 025F D004          JNC   .dispatch_not_supported
 0261 64            ASL   A
 0262 EFBA          JACC  USB_DT_bmRequestType
 0264           .dispatch_not_supported:
 0264 8001          JMP  USB_Not_Supported_Local_Drv    
 0266           
 0266           USB_Not_Supported_Local_Drv:
 0266 7D0000            LJMP     USB_Not_Supported
 0269           
 0269           
 0269           ;-----------------------------------------------
 0269           ; Add custom application code for routines 
 0269           ;-----------------------------------------------
 0269           
 0269              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 0269              ;---------------------------------------------------
 0269              ; Insert your custom code below this banner
 0269              ;---------------------------------------------------
 0269           
 0269              ;---------------------------------------------------
 0269              ; Insert your custom code above this banner
 0269              ;---------------------------------------------------
 0269              ;@PSoC_UserCode_END@ (Do not change this line.)
 0269           
 0269           ; End of File USB_drv.asm
